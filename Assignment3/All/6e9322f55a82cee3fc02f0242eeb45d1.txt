
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Abusing hash kernels for wildly unprincipled machine learning</title>
    <meta name="description" content="Hash kernels were originally designed for learning on bag-of-words document representations. But with a little imagination, we can use them to learn on all types of structured data.
">
    <meta name="author" content="Jeremy Hoon">

    <!-- Enable responsive viewport -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <!-- Le styles -->
    <link href="/assets/themes/twitter/bootstrap/css/bootstrap.2.2.2.min.css" rel="stylesheet">
    <link href="/assets/themes/twitter/css/style.css?body=1" rel="stylesheet" type="text/css" media="all">

    <!-- Le fav and touch icons -->
  <!-- Update these with your own images
    <link rel="shortcut icon" href="images/favicon.ico">
    <link rel="apple-touch-icon" href="images/apple-touch-icon.png">
    <link rel="apple-touch-icon" sizes="72x72" href="images/apple-touch-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="114x114" href="images/apple-touch-icon-114x114.png">
  -->

    <!-- atom & rss feed -->
    <link href="/atom.xml" type="application/atom+xml" rel="alternate" title="Sitewide ATOM Feed">
    <link href="/rss.xml" type="application/rss+xml" rel="alternate" title="Sitewide RSS Feed">

  </head>

  <body>
    <div class="navbar">
      <div class="navbar-inner">
        <div class="container-narrow">
          <a class="brand" href="/">Nuts 'n Bolts</a>
          <ul class="nav">
            
            
            


  
    
      
    
  
    
      
      	
      	<li><a href="/tags.html">Tags</a></li>
      	
      
    
  
    
      
    
  
    
      
    
  
    
      
    
  
    
      
      	
      	<li><a href="/archive.html">Archive</a></li>
      	
      
    
  



          </ul>
        </div>
      </div>
    </div>

    <div class="container-narrow">

      <div class="content">
        
<div class="page-header">
  <h1>Abusing hash kernels for wildly unprincipled machine learning </h1>
</div>

<div class="row-fluid post-full">
  <div class="span12">
    <div class="date">
      <span>19 March 2013</strong>
    </div>
    <div class="content">
      <p><em>Want to skip to the code? Find it on <a href='https://github.com/jeremydhoon/hashkernel'>Github</a>.</em></p>

<p>Modern <a href='http://en.wikipedia.org/wiki/Support_vector_machine'>machine learning</a> <a href='http://en.wikipedia.org/wiki/
Deep_learning#Deep_Learning_in_Artificial_Neural_Networks'>techniques</a> are so powerful that the hardest part of training a classifier is often getting training data into the right format. What if we could skip all the tedious preparation and train a classifier on virtually any kind of data? In this post, I&#8217;ll go over the trouble with preparing data for machine learning, and then describe <a href='https://github.com/jeremydhoon/hashkernel/'>hashkernel</a>, a Python module I wrote to demonstrate how a technique called <em>hash kernels</em> can avoid these pitfalls.</p>

<p>While I hope that this post will be accessible to readers without any experience with machine learning, you may find it easier to follow along if you&#8217;re already comfortable with concepts such as <a href='http://en.wikipedia.org/wiki/Statistical_classification'>classification</a> and <a href='http://en.wikipedia.org/wiki/Logistic_regression'>logistic regression</a>.</p>

<h2 id='no_classification_without_representation'>No Classification Without Representation</h2>

<p><em>Note: if you&#8217;re familiar with basic machine learning concepts and with the bag-of-words model, please feel free to skip to the next section.</em></p>

<p>Learning algorithms all require their training data appear in a specific format. While the format may vary from one algorithm to another, most algorithms take as input a <em><a href='http://en.wikipedia.org/wiki/Feature_vector'>feature vector</a></em>, an array containing values all of the same type. Feature vectors are a great way to represent some inputs, like a geometric point in space where each entry in the feature vector is a coordinate, or a fixed-size image where each entry is the brightness of a pixel.</p>

<p>Yet data in real-world applications is much messier. For starters, the features in a real-world dataset rarely all share the same data type. Fields present in one <a href='http://robotics.stanford.edu/~ronnyk/glossary.html'>instance</a> may be missing in another. To easily training a classifier on real world data, we need to be able to convert data in an arbitrary format consisting of mixed of types into a feature vector that a classifier can understand.</p>

<p>Computer scientists working in the area of <em>text classification</em> understand this problem quite well, since instances in this area are simply strings of text &#8211; a format far different from traditional feature vectors. For example, one might wish to classify an email message as &#8220;spam&#8221; or &#8220;ham&#8221;. In order to do so, the text of each email message must be converted to a feature vector. This is typically achieved by applying a transformation know as the <em><a href='http://en.wikipedia.org/wiki/Bag-of-words_model'>bag-of-words model</a></em>.</p>

<p>In bag-of-words, we assign an index to each distinct word that appears in any training instance. The resulting feature vector has length <em>max_word_index + 1</em>. Each entry in the feature vector is either one of the word for the entry&#8217;s index is present, or zero otherwise.</p>

<p>Bag-of-words can be unwieldy. First, we might need to know every English word. What about commonly-used proper nouns that don&#8217;t appear in the <a href='http://en.wikipedia.org/wiki/Oxford_English_Dictionary'>Oxford English Dictionary</a>? Next, we take note of the sparsity of the bag-of-words feature vector. For example, in the problem of separating spam- and ham emails, each message would typically contain no more than a few hundred words. Yet there are over one hundred thousand unique words in the OED alone.</p>

<h2 id='introducing_hash_kernels'>Introducing Hash Kernels</h2>

<p>Hash kernels were invented to surmount both of these problems with bag-of-words.</p>

<p>In this section, I&#8217;ll first describe how hash kernels work, and then how they can help us more efficiently convert a piece of input text to a feature vector suitable for machine learning.</p>

<p>Fundamentally, a hash kernel is just a fixed-size array. Unlike in the traditional bag-of-words model from the previous section, the size of the array isn&#8217;t rigidly determined by the input space. In a text classification problem like spam filtering, this means that the size of the array isn&#8217;t determined by the number of distinct words under consideration. Instead, hash kernels give us the freedom to choose an array size that balances computational performance with classification accuracy (more on how this works in a bit).</p>

<p>The &#8220;hash&#8221; part of the name &#8220;hash kernel&#8221; comes from the way features are incorporated into the array. Using a <a href='http://en.wikipedia.org/wiki/Hash_function'>hash function</a>, we map each feature to an index in the array. In the spam filtering case, where each word is a feature (one if the word is found in an input text, or zero if absent), we hash that word to obtain an index in the array. We then add the value of the feature to the array entry at that index, with a few twists. <a href='http://alex.smola.org/papers/2009/Weinbergeretal09.pdf'>Weinberg et al.</a> suggest adding or subtracting the value of the feature according to another hash function. Here&#8217;s a more concrete description of Weinberg&#8217;s method, expressed in Python:</p>

<pre><code>feature_vector = [0 for _ in xrange(1 &lt;&lt; bits)]
for word in input_text.split():
  hash = crc32(word)  # CRC-32 hash function, available in the zlib module
  index = hash &amp; ((1 &lt;&lt; bits) - 1)
  # Use the nth bit, zero-indexed, to determine if we add or subtract
  # one from the index.
  sign = (((hash &amp; (1 &lt;&lt; bits)) &gt;&gt; bits) &lt;&lt; 1) - 1
  feature_vector[index] += sign</code></pre>

<p>The final step is to feed the array into a learner to create a classifier. Since the array looks just like a typical feature vector, it should be compatible with all your favorite learning algorithms.</p>

<h2 id='brace_for_impact'>Brace For Impact</h2>

<p>If you&#8217;re following along closely, you may have noticed that some words may &#8220;collide&#8221; on the same index. That is, a single hash kernel array element may contain information about more than one feature. Empirically, a moderate collision rate tends to have a benign effect on classification performance. <a href='http://jmlr.csail.mit.edu/papers/volume10/shi09a/shi09a.pdf'>Shi et al.</a> observe that in one of their experiments, a collision rate of 94% (that is, 94% of features mapped to the same index as one or more other features) resulted in an increase in the experimental error rate from 5.5% to only 6%.</p>

<p>But as the frequency of collisions reaches extreme levels, where each array element plays host to many features, classification accuracy inevitably suffers. When this happens, we can increase the size of the hash kernel array, so that these features are spread out of over more elements.</p>

<h2 id='if_we_can_hash_it_we_can_learn_it'>If We Can Hash It, We Can Learn It</h2>

<p>Now that we&#8217;ve seen how hash kernels can power text classifiation tasks, let&#8217;s take a look at how we can apply hash kernels to just about any type of structured data. All we need is a hash function for that takes as input a piece of structured data and maps its pieces to indices in a hash kernel array. This opens possibilities ranging from learning on a stream of arbitrary JSON data, to classifying objects in a dynamic programming language like Python or Javascript.</p>

<p>To demonstrate how hash kernels can learn on arbitrary structured data, I put together <a href='https://github.com/jeremydhoon/hashkernel'>hashkernel</a>, a hash-kernel-based online learner. Feed it a stream of arbitrary Python data structures (any mixture of lists, dictionaries, or even objects) and it will train on these inputs. It does so by recursively exploring each instance and treating each path in this recursion as if it were a word in a bag-of-words, as with email messages in a spam detection task.</p>

<h2 id='hashkernel_classification_performance'>Hashkernel Classification Performance</h2>

<p>As an initial test of hashkernel, I obtained two datasets from the <a href='
http://archive.ics.uci.edu/ml/datasets/'>UC Irvine Machine Learning Dataset Repository</a>. With virtually no set-up, I was able to train a classifier on each dataset and achieve respectable results, in line with those reported by researchers using other, more labor-intensive machine learning techniques. You can replicate these results by running <em>hashkernel.py</em>:</p>

<pre><code>$ python ./hashkernel.py --mushroom --us-adult -b 16 -t0.25
Error rate on load_mushroom_dataset: 0.178
Error rate on load_us_adult_dataset: 0.171</code></pre>

<p>For comparison, the contributors of the <a href='http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.names'>US Adult dataset</a> error rates no better than fourteen percent using a number of different machine learning techniques.</p>

<p>These datasets were designed to be easy to work with. They&#8217;re neatly arranged in <a href='http://en.wikipedia.org/wiki/Comma-separated_values'>CSV</a> format to be especially easy to feed into a learning algorithms. But I designed hashkernel to work with complex, messy structured data.</p>

<p>To show off hashkernel&#8217;s versatility, I obtained data for 346 pieces of data taken from my personal Facebook account, using Facebook&#8217;s <a href='https://developers.facebook.com/'>Graph API</a>. My goal was to train a classifier that predicts whether a piece of Facebook content will receive at least one Like. The structured data I gathered includes information about my status updates, photos I&#8217;m tagged in, and stories in my newsfeed. Each piece of data consists of a JSON dictionary. Each dictionary contains nested information, such as comments, likes, and <a href='http://en.wikipedia.org/wiki/Content_delivery_network'>CDN</a> URLs for associated images. The following example has been edited to remove irrelevant attributes such as URLs for alternate image sizes, and to preserve my friends&#8217; privacy.</p>
<pre style='height:16em; overflow:scroll;'>
{
    "picture": "[URL]",
    "from": {
	"name": "[friend's name]",
	"id": "[friend's FB UID]"
    },
    "name": "The North Shore of Lake Tahoe!",
    "source": "[URL]",
    "comments": {
	"data": [
	    {
		"from": {
		    "name": "[different friend's name]",
		    "id": "[different friend's FB UID]"
		},
		"like_count": 1,
		"can_remove": false,
		"created_time": "2012-03-30T01:29:00+0000",
		"message": "We are so cute!",
		"id": "[friend's FB UID]",
		"user_likes": false
	    }
	]
    },
    "height": 540,
    "width": 720,
    "likes": {
	"data": [
	    {
		"id": "31062",
		"name": "Jeremy Hoon"
	    }
	]
    },
    "created_time": "2012-03-30T00:29:15+0000",
    "updated_time": "2012-03-30T00:29:17+0000",
    "id": "3414272829923",
}
</pre>
<p>To obtain training labels, I examined and stripped the &#8220;likes&#8221; attribute from each object&#8217;s dictionary (where a lack of &#8220;likes&#8221; attribute was interpreted as zero likes). Using these stripped dictionaries as instances, I was able to train a hashkernel classifier with little effort:</p>

<pre><code>import hashkernel

def is_liked(item):
    if &quot;likes&quot; not in item:
        return False
    elif &quot;count&quot; not in item[&quot;likes&quot;]:
        item[&quot;likes&quot;][&quot;count&quot;] = len(item[&quot;likes&quot;][&quot;data&quot;])
    likes = item.pop(&quot;likes&quot;)
    return likes[&quot;count&quot;] &gt; 0

def train(train_set):
    kernel = hashkernel.HashKernelLogisticRegression(bits=17)
    for instance in train_set:
    label = is_liked(instance)
        kernel.add(instance, label)
return kernel</code></pre>

<p>To evaluate this classifier, I ran leave-one-out cross-validation over the set of 346 Facebook data objects. I ran the experiment using seventeen bits of hash space, meaning that I used an array size of 2^17 elements. You can find my implementation in <a href='https://github.com/jeremydhoon/hashkernel/blob/master/fblearn.py'>fblearn.py</a>. To replicate my results, run</p>

<pre><code>$ python fblearn.py -b17
failure rate: 0.260115606936
fp/fn/total 40 50 346
rate liked: 0.439306358382</code></pre>

<p>This output indicates an error rate of twenty six percent, meaning that hashkernel was correct about 74% of the time. For comparison, always guessing &#8220;not liked&#8221; would have resulted in an accuracy of 56%.</p>

<p>I&#8217;m sure I could have done a better job of classifying my Facebook data with the help of some intelligent pre-processing (for example, by bucketing numeric features). But considering the ease of building a hashkernel classifier, I am quite happy with this figure.</p>

<h2 id='further_reading'>Further Reading</h2>

<p>The academic literature contains a wealth of information on the (principled) use of hash kernels:</p>

<ul>
<li><a href='http://alex.smola.org/papers/2009/Weinbergeretal09.pdf'>Weinberg et al.</a></li>

<li><a href='http://hunch.net/~jl/projects/hash_reps/hash_kernels/hashkernel.pdf'>Shi et al.</a></li>
</ul>

<p>Some of this academic work has been implemented in the featureful <a href='https://github.com/JohnLangford/vowpal_wabbit/wiki'>Vowpal Wabbit</a> package out of Yahoo- and Microsoft&#8217;s research arms. It further exploits hash kernels by using the hash to map words (or other types of features) to different machines in a cluster in order to parallelize the machine learning process.</p>
    </div>

    

  
    <ul class="tag_box inline">
      <li><i class="icon-tags"></i></li>
      
      


  
     
    	<li><a href="/tags.html#ml-ref">ml <span>1</span></a></li>
    
  



    </ul>
    

    <hr>
    <div class="pagination">
      <ul>
      
        <li class="prev disabled"><a>&larr; Previous</a></li>
      
        <li><a href="/archive.html">Archive</a></li>
      
        <li class="next disabled"><a>Next &rarr;</a>
      
      </ul>
    </div>
    <hr>
    
  </div>
</div>

      </div>
      <hr>
      <footer>
        <p>&copy; 2013 Jeremy Hoon
          with help from <a href="http://jekyllbootstrap.com" target="_blank" title="The Definitive Jekyll Blogging Framework">Jekyll Bootstrap</a>
          and <a href="http://twitter.github.com/bootstrap/" target="_blank">Twitter Bootstrap</a>
        </p>
      </footer>

    </div>

    


  <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-39798780-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>



  </body>
</html>

